functionDefinitionList	: functionDefinition 						{}
						| functionDefinitionList functionDefinition  	{}
						;


compoundStatement 	:  	statementList  									{}
					|  	declarationList 								{}
					|  	declarationList statementList 					{}
					;

statementList   : statement 
				| statementList statement ;

statement : labeledStatement
		  | compoundStatement
		  | expressionStatement 
		  | selectionStatement
		  | jumpStatement;

labeledStatement : ID ':' statement
	| CASE constantExpression ':' statement
	| DEFAULT ':' statement
	;

selectionStatement
	: IF '(' expression ')' statement
	| IF '(' expression ')' statement ELSE statement
	| SWITCH '(' expression ')' statement
	;

iterationStatement
	: WHILE '(' expression ')' statement
	| DO statement WHILE '(' expression ')' SEMI
	| FOR '(' expressionStatement expressionStatement ')' statement
	| FOR '(' expressionStatement expressionStatement expression ')' statement
	;

expressionStatement
	: ';'
	| expression ';'
	;

jumpStatement
	: CONTINUE ';'
	| BREAK ';'
	| RETURN ';'
	| RETURN expression ';'
	;

declarationList : typeSpecifier initDeclaratorList ';' 			   	   {}
				| declarationList typeSpecifier initDeclaratorList ';'  {} 
				;

initDeclaratorList
	: initDeclarator
	| initDeclaratorList ',' initDeclarator
	;

initDeclarator : Ids
			   | Ids '=' initializer
				;


constantExpression
	: conditionalExpression
	;

initializer : assgExpression
	| '{' initializerList '}'
	| '{' initializerList ',' '}'
	;

initializerList
	: initializer
	| initializerList ',' initializer
	;

assgExpression: conditionalExpression {};

primaryExpression
	: ID
	| CONSTANT
	| STRING_LITERAL
	| '(' expression ')'
	;

expression
	: assgExpression
	| expression ',' assgExpression
	;

conditionalExpression: OrExpression
	| OrExpression '?' expression ':' conditionalExpression {}
	; 

OrExpression: AndExpression
	| OrExpression OR_OP AndExpression
	;

AndExpression: EqExpression 
	| AndExpression EQ_OP EqExpression
	;

relationExpression
	: additiveExpression
	| relationExpression '<' additiveExpression
	| relationExpression '>' additiveExpression
	| relationExpression GQ_OP additiveExpression
	| relationExpression LQ_OP additiveExpression
	;

additiveExpression 
	: multiplicativeExpression
	| additiveExpression '+' multiplicativeExpression
	| additiveExpression '-' multiplicativeExpression
	;

multiplicativeExpression
	: multiplicativeExpression '*' primaryExpression
	| multiplicativeExpression '/' primaryExpression
	| multiplicativeExpression '%' primaryExpression
	;

EqExpression
	: relationExpression
	| EqExpression EQ_OP relationExpression
	| EqExpression NQ_OP relationExpression
	;

typeSpecifier : type         											{}
			  | typeCompouse 											{}
			  ;

type : INTEGER  														{}
	 | FLOAT_NUMBER 													{}
	 | STRING 															{}
	 | BOOLEAN															{}
	 | ARRAY 															{}
	 | VOID																{}
	 ;

Ids : ID {} 
	| Ids ',' ID {}
	;

typeCompouse  : STRUCT '@' type 										{}
			  | MATRIZ '@' type 										{}
			  | SET '@' type 											{}									
			  ;

blockType : FUNCTION | FOR | IF | ELSE | WHILE ;

endBlock : BLOCK_END blockType

argParamList : argParam							  				   		{}	
			 | argParamList COMMA argParam 			   				   	{}

argParam : type ID 														{}
		 | typeCompouse '@' type ID										{}
		 ;

functionDeclaration : type ID '(' argParamList ')' {}
|type ID '(' ')' {}
|typeCompouse ID '(' argParamList ')' {}
|typeCompouse ID '(' ')' {}
;

functionDefinition 	: FUNCTION functionDeclaration compoundStatement BLOCK_END FUNCTION {}					;
