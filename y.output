Terminals unused in grammar

    WHILE
    DO
    SEMI
    CONSTANT
    OR_OP
    LQ_OP
    GQ_OP
    EQ_OP
    NQ_OP
    STRING_LITERAL
    SWITCH
    DEFAULT
    CASE
    FOR


State 4 conflicts: 1 shift/reduce
State 36 conflicts: 1 shift/reduce
State 38 conflicts: 1 shift/reduce
State 50 conflicts: 1 shift/reduce, 1 reduce/reduce
State 60 conflicts: 5 reduce/reduce
State 71 conflicts: 1 shift/reduce
State 75 conflicts: 1 shift/reduce


Grammar

    0 $accept: prog $end

    1 type: INTEGER
    2     | FLOAT_NUMBER
    3     | STRING
    4     | BOOLEAN
    5     | ARRAY
    6     | VOID

    7 typeCompouse: STRUCT '@' type
    8             | MATRIZ '@' type
    9             | SET '@' type

   10 argParamList: argParam
   11             | argParamList COMMA argParam

   12 argParam: type ID
   13         | typeCompouse '@' type ID

   14 functionDeclaration: type ID '(' argParamList ')'
   15                    | type ID '(' ')'
   16                    | typeCompouse ID '(' argParamList ')'
   17                    | typeCompouse ID '(' ')'

   18 statement: compoundStatement
   19          | selectionStatement
   20          | jumpStatement

   21 jumpStatement: CONTINUE
   22              | BREAK
   23              | RETURN
   24              | RETURN 'd'

   25 selectionStatement: IF '(' 'a' ')' statement
   26                   | IF '(' 't' ')' statement ELSE statement

   27 statementList: statement ';'
   28              | statementList statement ';'

   29 compoundStatement: statementList
   30                  | declarationList
   31                  | declarationList statementList

   32 functionDefinition: FUNCTION functionDeclaration compoundStatement BLOCK_END FUNCTION

   33 functionDefinitionList: functionDefinition
   34                       | functionDefinitionList functionDefinition

   35 declarationList: ';'

   36 alt: functionDefinitionList
   37    | declarationList

   38 alts: alt
   39     | alts alt

   40 prog: alts


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 14 15 16 17 25 26
    ')' (41) 14 15 16 17 25 26
    ';' (59) 27 28 35
    '@' (64) 7 8 9 13
    'a' (97) 25
    'd' (100) 24
    't' (116) 26
    error (256)
    ID <sValue> (258) 12 13 14 15 16 17
    WHILE (259)
    BLOCK_END (260) 32
    DO (261)
    IF (262) 25 26
    ELSE (263) 26
    SEMI (264)
    COMMA (265) 11
    CONSTANT (266)
    OR_OP (267)
    LQ_OP (268)
    GQ_OP (269)
    EQ_OP (270)
    NQ_OP (271)
    STRING_LITERAL (272)
    SWITCH (273)
    DEFAULT (274)
    CASE (275)
    FOR (276)
    CONTINUE (277) 21
    BREAK (278) 22
    RETURN (279) 23 24
    FUNCTION (280) 32
    INTEGER (281) 1
    FLOAT_NUMBER (282) 2
    STRING (283) 3
    BOOLEAN (284) 4
    SET (285) 9
    ARRAY (286) 5
    MATRIZ (287) 8
    VOID (288) 6
    STRUCT (289) 7


Nonterminals, with rules where they appear

    $accept (42)
        on left: 0
    type (43)
        on left: 1 2 3 4 5 6
        on right: 7 8 9 12 13 14 15
    typeCompouse (44)
        on left: 7 8 9
        on right: 13 16 17
    argParamList (45)
        on left: 10 11
        on right: 11 14 16
    argParam (46)
        on left: 12 13
        on right: 10 11
    functionDeclaration (47)
        on left: 14 15 16 17
        on right: 32
    statement (48)
        on left: 18 19 20
        on right: 25 26 27 28
    jumpStatement (49)
        on left: 21 22 23 24
        on right: 20
    selectionStatement (50)
        on left: 25 26
        on right: 19
    statementList (51)
        on left: 27 28
        on right: 28 29 31
    compoundStatement (52)
        on left: 29 30 31
        on right: 18 32
    functionDefinition (53)
        on left: 32
        on right: 33 34
    functionDefinitionList (54)
        on left: 33 34
        on right: 34 36
    declarationList (55)
        on left: 35
        on right: 30 31 37
    alt (56)
        on left: 36 37
        on right: 38 39
    alts (57)
        on left: 38 39
        on right: 39 40
    prog (58)
        on left: 40
        on right: 0


State 0

    0 $accept: . prog $end

    FUNCTION  shift, and go to state 1
    ';'       shift, and go to state 2

    functionDefinition      go to state 3
    functionDefinitionList  go to state 4
    declarationList         go to state 5
    alt                     go to state 6
    alts                    go to state 7
    prog                    go to state 8


State 1

   32 functionDefinition: FUNCTION . functionDeclaration compoundStatement BLOCK_END FUNCTION

    INTEGER       shift, and go to state 9
    FLOAT_NUMBER  shift, and go to state 10
    STRING        shift, and go to state 11
    BOOLEAN       shift, and go to state 12
    SET           shift, and go to state 13
    ARRAY         shift, and go to state 14
    MATRIZ        shift, and go to state 15
    VOID          shift, and go to state 16
    STRUCT        shift, and go to state 17

    type                 go to state 18
    typeCompouse         go to state 19
    functionDeclaration  go to state 20


State 2

   35 declarationList: ';' .

    $default  reduce using rule 35 (declarationList)


State 3

   33 functionDefinitionList: functionDefinition .

    $default  reduce using rule 33 (functionDefinitionList)


State 4

   34 functionDefinitionList: functionDefinitionList . functionDefinition
   36 alt: functionDefinitionList .

    FUNCTION  shift, and go to state 1

    FUNCTION  [reduce using rule 36 (alt)]
    $default  reduce using rule 36 (alt)

    functionDefinition  go to state 21


State 5

   37 alt: declarationList .

    $default  reduce using rule 37 (alt)


State 6

   38 alts: alt .

    $default  reduce using rule 38 (alts)


State 7

   39 alts: alts . alt
   40 prog: alts .

    FUNCTION  shift, and go to state 1
    ';'       shift, and go to state 2

    $default  reduce using rule 40 (prog)

    functionDefinition      go to state 3
    functionDefinitionList  go to state 4
    declarationList         go to state 5
    alt                     go to state 22


State 8

    0 $accept: prog . $end

    $end  shift, and go to state 23


State 9

    1 type: INTEGER .

    $default  reduce using rule 1 (type)


State 10

    2 type: FLOAT_NUMBER .

    $default  reduce using rule 2 (type)


State 11

    3 type: STRING .

    $default  reduce using rule 3 (type)


State 12

    4 type: BOOLEAN .

    $default  reduce using rule 4 (type)


State 13

    9 typeCompouse: SET . '@' type

    '@'  shift, and go to state 24


State 14

    5 type: ARRAY .

    $default  reduce using rule 5 (type)


State 15

    8 typeCompouse: MATRIZ . '@' type

    '@'  shift, and go to state 25


State 16

    6 type: VOID .

    $default  reduce using rule 6 (type)


State 17

    7 typeCompouse: STRUCT . '@' type

    '@'  shift, and go to state 26


State 18

   14 functionDeclaration: type . ID '(' argParamList ')'
   15                    | type . ID '(' ')'

    ID  shift, and go to state 27


State 19

   16 functionDeclaration: typeCompouse . ID '(' argParamList ')'
   17                    | typeCompouse . ID '(' ')'

    ID  shift, and go to state 28


State 20

   32 functionDefinition: FUNCTION functionDeclaration . compoundStatement BLOCK_END FUNCTION

    IF        shift, and go to state 29
    CONTINUE  shift, and go to state 30
    BREAK     shift, and go to state 31
    RETURN    shift, and go to state 32
    ';'       shift, and go to state 2

    statement           go to state 33
    jumpStatement       go to state 34
    selectionStatement  go to state 35
    statementList       go to state 36
    compoundStatement   go to state 37
    declarationList     go to state 38


State 21

   34 functionDefinitionList: functionDefinitionList functionDefinition .

    $default  reduce using rule 34 (functionDefinitionList)


State 22

   39 alts: alts alt .

    $default  reduce using rule 39 (alts)


State 23

    0 $accept: prog $end .

    $default  accept


State 24

    9 typeCompouse: SET '@' . type

    INTEGER       shift, and go to state 9
    FLOAT_NUMBER  shift, and go to state 10
    STRING        shift, and go to state 11
    BOOLEAN       shift, and go to state 12
    ARRAY         shift, and go to state 14
    VOID          shift, and go to state 16

    type  go to state 39


State 25

    8 typeCompouse: MATRIZ '@' . type

    INTEGER       shift, and go to state 9
    FLOAT_NUMBER  shift, and go to state 10
    STRING        shift, and go to state 11
    BOOLEAN       shift, and go to state 12
    ARRAY         shift, and go to state 14
    VOID          shift, and go to state 16

    type  go to state 40


State 26

    7 typeCompouse: STRUCT '@' . type

    INTEGER       shift, and go to state 9
    FLOAT_NUMBER  shift, and go to state 10
    STRING        shift, and go to state 11
    BOOLEAN       shift, and go to state 12
    ARRAY         shift, and go to state 14
    VOID          shift, and go to state 16

    type  go to state 41


State 27

   14 functionDeclaration: type ID . '(' argParamList ')'
   15                    | type ID . '(' ')'

    '('  shift, and go to state 42


State 28

   16 functionDeclaration: typeCompouse ID . '(' argParamList ')'
   17                    | typeCompouse ID . '(' ')'

    '('  shift, and go to state 43


State 29

   25 selectionStatement: IF . '(' 'a' ')' statement
   26                   | IF . '(' 't' ')' statement ELSE statement

    '('  shift, and go to state 44


State 30

   21 jumpStatement: CONTINUE .

    $default  reduce using rule 21 (jumpStatement)


State 31

   22 jumpStatement: BREAK .

    $default  reduce using rule 22 (jumpStatement)


State 32

   23 jumpStatement: RETURN .
   24              | RETURN . 'd'

    'd'  shift, and go to state 45

    $default  reduce using rule 23 (jumpStatement)


State 33

   27 statementList: statement . ';'

    ';'  shift, and go to state 46


State 34

   20 statement: jumpStatement .

    $default  reduce using rule 20 (statement)


State 35

   19 statement: selectionStatement .

    $default  reduce using rule 19 (statement)


State 36

   28 statementList: statementList . statement ';'
   29 compoundStatement: statementList .

    IF        shift, and go to state 29
    CONTINUE  shift, and go to state 30
    BREAK     shift, and go to state 31
    RETURN    shift, and go to state 32
    ';'       shift, and go to state 2

    ';'       [reduce using rule 29 (compoundStatement)]
    $default  reduce using rule 29 (compoundStatement)

    statement           go to state 47
    jumpStatement       go to state 34
    selectionStatement  go to state 35
    statementList       go to state 36
    compoundStatement   go to state 48
    declarationList     go to state 38


State 37

   18 statement: compoundStatement .
   32 functionDefinition: FUNCTION functionDeclaration compoundStatement . BLOCK_END FUNCTION

    BLOCK_END  shift, and go to state 49

    $default  reduce using rule 18 (statement)


State 38

   30 compoundStatement: declarationList .
   31                  | declarationList . statementList

    IF        shift, and go to state 29
    CONTINUE  shift, and go to state 30
    BREAK     shift, and go to state 31
    RETURN    shift, and go to state 32
    ';'       shift, and go to state 2

    ';'       [reduce using rule 30 (compoundStatement)]
    $default  reduce using rule 30 (compoundStatement)

    statement           go to state 33
    jumpStatement       go to state 34
    selectionStatement  go to state 35
    statementList       go to state 50
    compoundStatement   go to state 48
    declarationList     go to state 38


State 39

    9 typeCompouse: SET '@' type .

    $default  reduce using rule 9 (typeCompouse)


State 40

    8 typeCompouse: MATRIZ '@' type .

    $default  reduce using rule 8 (typeCompouse)


State 41

    7 typeCompouse: STRUCT '@' type .

    $default  reduce using rule 7 (typeCompouse)


State 42

   14 functionDeclaration: type ID '(' . argParamList ')'
   15                    | type ID '(' . ')'

    INTEGER       shift, and go to state 9
    FLOAT_NUMBER  shift, and go to state 10
    STRING        shift, and go to state 11
    BOOLEAN       shift, and go to state 12
    SET           shift, and go to state 13
    ARRAY         shift, and go to state 14
    MATRIZ        shift, and go to state 15
    VOID          shift, and go to state 16
    STRUCT        shift, and go to state 17
    ')'           shift, and go to state 51

    type          go to state 52
    typeCompouse  go to state 53
    argParamList  go to state 54
    argParam      go to state 55


State 43

   16 functionDeclaration: typeCompouse ID '(' . argParamList ')'
   17                    | typeCompouse ID '(' . ')'

    INTEGER       shift, and go to state 9
    FLOAT_NUMBER  shift, and go to state 10
    STRING        shift, and go to state 11
    BOOLEAN       shift, and go to state 12
    SET           shift, and go to state 13
    ARRAY         shift, and go to state 14
    MATRIZ        shift, and go to state 15
    VOID          shift, and go to state 16
    STRUCT        shift, and go to state 17
    ')'           shift, and go to state 56

    type          go to state 52
    typeCompouse  go to state 53
    argParamList  go to state 57
    argParam      go to state 55


State 44

   25 selectionStatement: IF '(' . 'a' ')' statement
   26                   | IF '(' . 't' ')' statement ELSE statement

    'a'  shift, and go to state 58
    't'  shift, and go to state 59


State 45

   24 jumpStatement: RETURN 'd' .

    $default  reduce using rule 24 (jumpStatement)


State 46

   27 statementList: statement ';' .

    $default  reduce using rule 27 (statementList)


State 47

   27 statementList: statement . ';'
   28              | statementList statement . ';'

    ';'  shift, and go to state 60


State 48

   18 statement: compoundStatement .

    $default  reduce using rule 18 (statement)


State 49

   32 functionDefinition: FUNCTION functionDeclaration compoundStatement BLOCK_END . FUNCTION

    FUNCTION  shift, and go to state 61


State 50

   28 statementList: statementList . statement ';'
   29 compoundStatement: statementList .
   31                  | declarationList statementList .

    IF        shift, and go to state 29
    CONTINUE  shift, and go to state 30
    BREAK     shift, and go to state 31
    RETURN    shift, and go to state 32
    ';'       shift, and go to state 2

    ';'       [reduce using rule 29 (compoundStatement)]
    ';'       [reduce using rule 31 (compoundStatement)]
    $default  reduce using rule 31 (compoundStatement)

    statement           go to state 47
    jumpStatement       go to state 34
    selectionStatement  go to state 35
    statementList       go to state 36
    compoundStatement   go to state 48
    declarationList     go to state 38


State 51

   15 functionDeclaration: type ID '(' ')' .

    $default  reduce using rule 15 (functionDeclaration)


State 52

   12 argParam: type . ID

    ID  shift, and go to state 62


State 53

   13 argParam: typeCompouse . '@' type ID

    '@'  shift, and go to state 63


State 54

   11 argParamList: argParamList . COMMA argParam
   14 functionDeclaration: type ID '(' argParamList . ')'

    COMMA  shift, and go to state 64
    ')'    shift, and go to state 65


State 55

   10 argParamList: argParam .

    $default  reduce using rule 10 (argParamList)


State 56

   17 functionDeclaration: typeCompouse ID '(' ')' .

    $default  reduce using rule 17 (functionDeclaration)


State 57

   11 argParamList: argParamList . COMMA argParam
   16 functionDeclaration: typeCompouse ID '(' argParamList . ')'

    COMMA  shift, and go to state 64
    ')'    shift, and go to state 66


State 58

   25 selectionStatement: IF '(' 'a' . ')' statement

    ')'  shift, and go to state 67


State 59

   26 selectionStatement: IF '(' 't' . ')' statement ELSE statement

    ')'  shift, and go to state 68


State 60

   27 statementList: statement ';' .
   28              | statementList statement ';' .

    BLOCK_END  reduce using rule 28 (statementList)
    IF         reduce using rule 27 (statementList)
    IF         [reduce using rule 28 (statementList)]
    ELSE       reduce using rule 28 (statementList)
    CONTINUE   reduce using rule 27 (statementList)
    CONTINUE   [reduce using rule 28 (statementList)]
    BREAK      reduce using rule 27 (statementList)
    BREAK      [reduce using rule 28 (statementList)]
    RETURN     reduce using rule 27 (statementList)
    RETURN     [reduce using rule 28 (statementList)]
    ';'        reduce using rule 27 (statementList)
    ';'        [reduce using rule 28 (statementList)]
    $default   reduce using rule 27 (statementList)


State 61

   32 functionDefinition: FUNCTION functionDeclaration compoundStatement BLOCK_END FUNCTION .

    $default  reduce using rule 32 (functionDefinition)


State 62

   12 argParam: type ID .

    $default  reduce using rule 12 (argParam)


State 63

   13 argParam: typeCompouse '@' . type ID

    INTEGER       shift, and go to state 9
    FLOAT_NUMBER  shift, and go to state 10
    STRING        shift, and go to state 11
    BOOLEAN       shift, and go to state 12
    ARRAY         shift, and go to state 14
    VOID          shift, and go to state 16

    type  go to state 69


State 64

   11 argParamList: argParamList COMMA . argParam

    INTEGER       shift, and go to state 9
    FLOAT_NUMBER  shift, and go to state 10
    STRING        shift, and go to state 11
    BOOLEAN       shift, and go to state 12
    SET           shift, and go to state 13
    ARRAY         shift, and go to state 14
    MATRIZ        shift, and go to state 15
    VOID          shift, and go to state 16
    STRUCT        shift, and go to state 17

    type          go to state 52
    typeCompouse  go to state 53
    argParam      go to state 70


State 65

   14 functionDeclaration: type ID '(' argParamList ')' .

    $default  reduce using rule 14 (functionDeclaration)


State 66

   16 functionDeclaration: typeCompouse ID '(' argParamList ')' .

    $default  reduce using rule 16 (functionDeclaration)


State 67

   25 selectionStatement: IF '(' 'a' ')' . statement

    IF        shift, and go to state 29
    CONTINUE  shift, and go to state 30
    BREAK     shift, and go to state 31
    RETURN    shift, and go to state 32
    ';'       shift, and go to state 2

    statement           go to state 71
    jumpStatement       go to state 34
    selectionStatement  go to state 35
    statementList       go to state 36
    compoundStatement   go to state 48
    declarationList     go to state 38


State 68

   26 selectionStatement: IF '(' 't' ')' . statement ELSE statement

    IF        shift, and go to state 29
    CONTINUE  shift, and go to state 30
    BREAK     shift, and go to state 31
    RETURN    shift, and go to state 32
    ';'       shift, and go to state 2

    statement           go to state 72
    jumpStatement       go to state 34
    selectionStatement  go to state 35
    statementList       go to state 36
    compoundStatement   go to state 48
    declarationList     go to state 38


State 69

   13 argParam: typeCompouse '@' type . ID

    ID  shift, and go to state 73


State 70

   11 argParamList: argParamList COMMA argParam .

    $default  reduce using rule 11 (argParamList)


State 71

   25 selectionStatement: IF '(' 'a' ')' statement .
   27 statementList: statement . ';'

    ';'  shift, and go to state 46

    ';'       [reduce using rule 25 (selectionStatement)]
    $default  reduce using rule 25 (selectionStatement)


State 72

   26 selectionStatement: IF '(' 't' ')' statement . ELSE statement
   27 statementList: statement . ';'

    ELSE  shift, and go to state 74
    ';'   shift, and go to state 46


State 73

   13 argParam: typeCompouse '@' type ID .

    $default  reduce using rule 13 (argParam)


State 74

   26 selectionStatement: IF '(' 't' ')' statement ELSE . statement

    IF        shift, and go to state 29
    CONTINUE  shift, and go to state 30
    BREAK     shift, and go to state 31
    RETURN    shift, and go to state 32
    ';'       shift, and go to state 2

    statement           go to state 75
    jumpStatement       go to state 34
    selectionStatement  go to state 35
    statementList       go to state 36
    compoundStatement   go to state 48
    declarationList     go to state 38


State 75

   26 selectionStatement: IF '(' 't' ')' statement ELSE statement .
   27 statementList: statement . ';'

    ';'  shift, and go to state 46

    ';'       [reduce using rule 26 (selectionStatement)]
    $default  reduce using rule 26 (selectionStatement)
